pipeline {
    agent any 
    
    environment {
        DOCKERHUB_USERNAME = "pmh304"
        IMAGE_NAME = "app" 
        DEPLOY_PATH = "${WORKSPACE}"
    }
    

    stages { 
        stage('Run Tests') {
             agent { 
                docker {
                    image 'python:3.11-slim' 

                    args '-u root -v $PWD:$PWD -w $PWD' 
                }
            }
            steps {
                echo 'Installing test dependencies...'

                sh 'pip install --no-cache-dir -r requirements.txt' 
                echo 'Running unit tests...'
                sh 'pytest --maxfail=1 --disable-warnings -q' 
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Starting image build...'
                sh "docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest ." 
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest" 
                }
            }
        }

        
        stage('Deploy via Docker Compose') { 
            steps {
                echo 'Starting deployment using Docker Compose...'
               
                sh """
                    cd ${DEPLOY_PATH} && \\
                    docker-compose down --remove-orphans && \\
                    docker-compose pull web && \\
                    docker-compose up -d --force-recreate web 
                """
            }
        }
  
    } 

    post {
        always {
            echo 'Pipeline finished. Logging out of Docker...'
            script {
        
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS' || currentBuild.result == 'UNSTABLE') {
                    try { 
                         sh "docker logout"
                    } catch (err) {
                        echo "Docker logout skipped or failed: ${err.getMessage()}"
                    }
                } else {
                     echo "Skipping docker logout due to earlier failure."
                }
            } 
        } 
        success {
            echo 'Pipeline successful. Cleaning up unused images...'
            sh "docker image prune -f"
        } 
        failure {
            echo 'Pipeline failed.'
        } 
    }
}