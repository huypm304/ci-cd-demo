// Jenkinsfile

pipeline {
    // 1. Chỉ định Jenkins chạy trên bất kỳ agent nào có sẵn
    agent any

    // 2. Định nghĩa các biến môi trường
    environment {
        DOCKERHUB_USERNAME = "pmh304"
        IMAGE_NAME = "my-python-app"
        // Thêm biến này để dễ quản lý tên container
        CONTAINER_NAME = "my-flask-container" 
    }

    // 3. Định nghĩa các GIAI ĐOẠN (stages)
    stages {
        // Giai đoạn 1: Lấy code từ Git
        stage('Git Clone') {
            steps {
                echo 'Đang lấy code...'
                git 'https://github.com/huypm304/ci-cd-demo.git'
            }
        }

        // Giai đoạn 2: Build Docker image
        stage('Build Docker Image') {
            steps {
                echo 'Bắt đầu build image...'
                sh "docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} ."
            }
        }

        // Giai đoạn 3: Đẩy image lên Docker Hub
        stage('Push to Docker Hub') {
            steps {
                echo 'Đang đẩy image lên Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        
        // GIAI ĐOẠN 4 (MỚI): Deploy ra chính máy Host
        stage('Deploy to Host') {
            steps {
                echo 'Bắt đầu Deploy (triển khai)...'
                
                // 1. Dừng container cũ (nếu có)
                // '|| true' để lệnh không bị lỗi nếu container chưa tồn tại
                sh "docker stop ${CONTAINER_NAME} || true"
                
                // 2. Xóa container cũ (nếu có)
                sh "docker rm ${CONTAINER_NAME} || true"
                
                echo "Đang chạy image: ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                
                // 3. Chạy container mới
                // Chúng ta dùng cổng 5000:5000 cho nhất quán
                sh "docker run -d -p 5000:5000 --name ${CONTAINER_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
            }
        }
    }
    
    // 4. Các bước chạy sau cùng
    post {
        // Luôn luôn chạy, dù thành công hay thất bại
        always {
            echo 'Hoàn thành pipeline. Đăng xuất Docker...'
            sh "docker logout"
        }
        // Chỉ chạy khi pipeline THÀNH CÔNG
        success {
            echo 'Pipeline thành công. Dọn dẹp images rác...'
            // Lệnh này sẽ xóa các image cũ, không còn được dùng
            sh "docker image prune -f"
        }
    }
}