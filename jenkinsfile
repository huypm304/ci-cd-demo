pipeline {
    agent any 
    
    environment {
        DOCKERHUB_USERNAME = "pmh304"
        IMAGE_NAME = "app" 
    
        DEPLOY_SERVER_IP = "172.31.46.126" 
        
        DEPLOY_SERVER_USER = "ubuntu" 
        DEPLOY_APP_PATH = "/home/ubuntu/app-deploy" 
    }
    
    stages { 
        stage('Run Tests') {
             agent { 
                docker {
                    image 'python:3.11-slim' 
                    args '-u root -v $PWD:$PWD -w $PWD' 
                }
            }
            steps {
                echo 'Installing test dependencies...'
                sh 'pip install --no-cache-dir -r requirements.txt' 
                echo 'Running unit tests...'
                sh 'pytest --maxfail=1 --disable-warnings -q' 
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Starting image build...'
                sh "docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest ." 
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest" 
                }
            }
        }

        stage('Deploy to Remote Server via SSH') { 
            steps {
                echo "Deploying to ${DEPLOY_SERVER_USER}@${DEPLOY_SERVER_IP}..."
                
    
                sshagent(credentials: ['jenkins-localhost-ssh']) {
                    

                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER_USER}@${DEPLOY_SERVER_IP} '''
                            echo "--- Connected to Deploy Server ---"
                            
                            mkdir -p ${DEPLOY_APP_PATH}
                            cd ${DEPLOY_APP_PATH}
                            
                            if [ -d ".git" ]; then
                                echo "Git repo exists. Pulling latest code..."
                                git pull
                            else
                                echo "Git repo not found. Cloning..."
                                git clone https://github.com/huypm304/ci-cd-demo.git .
                            fi
                            
                            echo "Pulling latest image and restarting service..."
                            docker compose down --remove-orphans
                            docker compose pull web
                            docker compose up -d --force-recreate web
                            echo "--- Deployment finished ---"
                        '''
                    """
                }
            }
        }
    } 

    post {
        always {
            echo 'Pipeline finished. Logging out of Docker...'
            script {
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS' || currentBuild.result == 'UNSTABLE') {
                    try { 
                         sh "docker logout"
                    } catch (err) {
                        echo "Docker logout skipped or failed: ${err.getMessage()}"
                    }
                } else {
                     echo "Skipping docker logout due to earlier failure."
                }
            } 
        } 
        success {
            echo 'Pipeline successful. Cleaning up unused images...'
            sh "docker image prune -f"
        } 
        failure {
            echo 'Pipeline failed.'
        } 
    }
}

