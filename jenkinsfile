pipeline {
    agent any
    environment {
        DOCKERHUB_USERNAME = "pmh304"

        IMAGE_NAME = "app" 
        CONTAINER_NAME = "my-flask-container" 
    }
    stages {

               stage('Run Tests') {
            agent {
                docker {
                    image 'python:3.11-slim' 
                    user: 'root' 
                    args '-v $PWD:$PWD -w $PWD' 
                }
            }
            steps {
                echo 'Installing test dependencies...'
                sh 'pip install --no-cache-dir -r requirements.txt' 
                echo 'Running unit tests...'
                sh 'pytest --maxfail=1 --disable-warnings -q' 
            }
        }


        stage('Build Docker Image') {
            steps {
                echo 'Starting image build...'
 
                sh "docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} ." 
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy to Host') {
            steps {
                echo 'Starting deployment...'
                sh "docker stop ${CONTAINER_NAME} || true"
                sh "docker rm ${CONTAINER_NAME} || true"
                sh "docker run -d -p 5000:5000 --name ${CONTAINER_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished. Logging out of Docker...'
            sh "docker logout"
        }
        success {
            echo 'Pipeline successful. Cleaning up unused images...'
            sh "docker image prune -f"
            slackSend channel: '#devops', message: "Build #${BUILD_NUMBER} succeeded!"
        }
        failure {
            echo 'Pipeline failed.'
            slackSend channel: '#devops', message: "Build #${BUILD_NUMBER} failed!"
        }
    }
}
